package jdbc;

import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import com.mysql.jdbc.Statement;

import entities.Task;

public class DAOService {
	private DAOUtil dao;

	public DAOUtil getDao() {
		return dao;
	}

	public DAOService() {
		super();
		dao = new DAOUtil();
	}

	public ArrayList<Task> login(String username, int password) throws Exception {
		// execute SQL Select query
		String sqlString = "SELECT name FROM users " + "WHERE name = '" + username + "' AND password = '" + password
				+ "';";
		dao.makeConn();
		ResultSet rs = dao.getConn().createStatement().executeQuery(sqlString);

		if (!rs.next())
			throw new Exception("invalid credentials");
		else {
			// if the result list is not empty, then the user successfully logs in
			// upon successful login, query for all tasks assigned to user
			sqlString = "SELECT tasks.id, tasks.name, tasks.description, tasks.complete "
					+ "FROM tasks INNER JOIN task_assignments " + "ON task_assignments.user = '" + username + "'"
					+ "AND task_assignments.task_id = tasks.id;";
			rs = dao.getConn().createStatement().executeQuery(sqlString);
			ArrayList<Task> assignedTasks = new ArrayList<Task>();
			String JSONString = "[";
			while (rs.next()) {
				Task task = new Task();
				task.setName(rs.getString("name"));
				task.setDescription(rs.getString("description"));
				task.setId(rs.getInt("id"));
				if (rs.getString("complete").equals("true"))
					task.complete = true;
				else
					task.complete = false;
				assignedTasks.add(task);
			}

			// after getting all assigned tasks, find all users that have been assigned each
			// task
			sqlString = "SELECT user FROM task_assignments WHERE task_id = ?;";
			PreparedStatement getUsers = dao.getConn().prepareStatement(sqlString);
			for (Task task : assignedTasks) {
				getUsers.setInt(1, task.getId());
				rs = getUsers.executeQuery();
				ArrayList<String> users = new ArrayList<String>();
				while (rs.next()) {
					users.add(rs.getString("user"));
				}
				task.setAssignedUsers(users);
			}
			dao.closeConn();
			return assignedTasks;
		}
	}

	public void addUser(String name, int password) throws ClassNotFoundException, SQLException {
		String SQLString = "INSERT INTO users (name, password) VALUES (\"" + name + "\",\"" + password + "\");";
		dao.makeConn();
		dao.getConn().createStatement().executeUpdate(SQLString);
		dao.closeConn();
	}

	public String fetchAllUsers() throws SQLException, ClassNotFoundException {
		String JSONString = "[";
		String SQLString = "SELECT name FROM users";
		dao.makeConn();
		ResultSet users = dao.getConn().createStatement().executeQuery(SQLString);
		while (users.next()) {
			JSONString += '"' + users.getString("name") + '"' + ",";
		}
		JSONString = JSONString.substring(0, JSONString.length() - 1) + "]";
		dao.closeConn();
		return JSONString;
	}

	public void createTask(Task task) throws SQLException, ClassNotFoundException {

		// insert task into table and get the resulting autogenerated id
		String SQLTaskString = "INSERT INTO tasks ( name, description, complete) VALUES (" +
		// task.getName().hashCode() + " , \"" +
				"\"" + task.getName() + "\" , \"" + task.getDescription() + "\" , \"false\" );";
		dao.makeConn();
		PreparedStatement insertTask = dao.getConn().prepareStatement(SQLTaskString, Statement.RETURN_GENERATED_KEYS);
		System.out.println(SQLTaskString);
		insertTask.executeUpdate();
		System.out.println("executed the update");
		ResultSet generatedKeys = insertTask.getGeneratedKeys();
		generatedKeys.next();
		long task_id = generatedKeys.getLong(1);
		System.out.println("generated task id: " + task_id);

		// take the autogenerated key to create task assignment entries in the task
		// assignment table for every assigned user
		String SQLAssignmentString = "INSERT INTO task_assignments (task_id, user) VALUES (" + task_id + " , ? );";
		PreparedStatement insertAssignment = dao.getConn().prepareStatement(SQLAssignmentString);
		for (String user : task.getAssignedUsers()) {
			insertAssignment.setString(1, user);
			insertAssignment.executeUpdate();
		}
		dao.closeConn();

	}

	public void editTask(Task task, boolean updateAssignments) throws SQLException, ClassNotFoundException {
		// change the task data in the task table
		String SQLTaskString = "UPDATE tasks SET name=\"" + task.getName() + "\", description=\"" + task.getDescription()
				+ "\", complete=\"" + task.complete + "\" WHERE id=" + task.getId() + ";";
		dao.makeConn();
		dao.getConn().createStatement().executeUpdate(SQLTaskString);
		dao.closeConn();
		if (updateAssignments) {
			// delete old assignments in task_assignments
			deleteIdFromTable(task.getId(), "task_assignments");
			dao.makeConn();
			// iterate through new list of assigned users and insert records accordingly
			String SQLAssignmentString = "INSERT INTO task_assignments (task_id, user) VALUES (" + task.getId()
					+ " , ? );";
			PreparedStatement insertAssignment = dao.getConn().prepareStatement(SQLAssignmentString);
			for (String user : task.getAssignedUsers()) {
				insertAssignment.setString(1, user);
				insertAssignment.executeUpdate();
			}
		}
		dao.closeConn();
	}

	public void deleteIdFromTable(int id, String tableName) throws SQLException, ClassNotFoundException {
		String columnName = "task_id";
		if (tableName.equals("tasks"))
			columnName = "id";
		String SQLString = "DELETE FROM " + tableName + " WHERE " + columnName + " = " + id + ";";
		dao.makeConn();
		dao.getConn().createStatement().executeUpdate(SQLString);
		dao.closeConn();
		System.out.println("deleted tables");
	}

	public void deleteTables() throws SQLException, ClassNotFoundException {
		System.out.print("deleting tables...");
		String SQLString = "DROP TABLE IF EXISTS tasks, users, task_assignments;";
		dao.makeConn();
		dao.getConn().createStatement().executeUpdate(SQLString);
		dao.closeConn();
		System.out.println("deleted tables");
	}

	public void makeTables() throws SQLException, ClassNotFoundException {

		String makeTaskTableSQLString = "CREATE TABLE tasks " + "(id INTEGER not NULL AUTO_INCREMENT, "
				+ " name VARCHAR(255), " + " description VARCHAR(255), " + " complete VARCHAR(5), "
				+ " PRIMARY KEY ( id ))";
		String makeUserTableSQLString = "CREATE TABLE users " + "(name VARCHAR(255), " + " password INTEGER, "
				+ " PRIMARY KEY (name))";
		String makeAssignmentTableSQLString = "CREATE TABLE task_assignments " + "(task_id INTEGER not NULL, "
				+ " user VARCHAR(255) not NULL, " + " PRIMARY KEY ( user, task_id ))";

		dao.makeConn();
		DatabaseMetaData dbm = dao.getConn().getMetaData();
		// check if "employee" table is there
		ResultSet tables = dbm.getTables(null, null, "tasks", null);
		if (!tables.next()) {
			dao.getConn().createStatement().executeUpdate(makeTaskTableSQLString);
		} else {
			System.out.println("tasks table already exists");
		}
		tables = dbm.getTables(null, null, "users", null);
		if (!tables.next()) {
			dao.getConn().createStatement().executeUpdate(makeUserTableSQLString);
		} else {
			System.out.println("users table already exists");
		}
		tables = dbm.getTables(null, null, "task_assignments", null);
		if (!tables.next()) {
			dao.getConn().createStatement().executeUpdate(makeAssignmentTableSQLString);
		} else {
			System.out.println("task_assignment table already exists");
		}
	}
}
